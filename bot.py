import pytz
import os
from datetime import time as dt_time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
from telegram.ext import CommandHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï!)
TOKEN = os.getenv("TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_poll(context)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
participants = {}
summary_msg_id = None

async def send_poll(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É"""
    global summary_msg_id
    print("üîî send_poll() –≤—ã–∑–≤–∞–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!")
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò–¥—É", callback_data="yes")],
        [InlineKeyboardButton("‚ùå –ù–µ –∏–¥—É", callback_data="no")]
    ]
    msg = await context.bot.send_message(
        chat_id=GROUP_ID,
        text="üèãÔ∏è‚Äç‚ôÇÔ∏è *–ö—Ç–æ –∏–¥—ë—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    summary_msg_id = msg.message_id
    print("‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    if query.data == "no":
        participants.pop(user.id, None)
        await query.answer(f"{user.first_name} –Ω–µ –∏–¥—ë—Ç")

    elif query.data == "yes":
        # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–ò–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_buttons = [
            [InlineKeyboardButton("18:00", callback_data="time_18")],
            [InlineKeyboardButton("19:00", callback_data="time_19")],
            [InlineKeyboardButton("20:00", callback_data="time_20")]
        ]
        await context.bot.send_message(
            chat_id=user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(time_buttons)
        )
        # –ù–ï –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    elif query.data.startswith("time_"):
        time_chosen = query.data.split('_')[1]
        participants[user.id] = {
            "name": user.first_name,
            "time": f"{time_chosen}:00"
        }
        await query.answer(f"–ó–∞–ø–∏—Å–∞–ª –Ω–∞ {time_chosen}:00!")

    await update_summary(context.bot)

async def update_summary(bot):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    global summary_msg_id
    if not summary_msg_id:
        return
        
    text = "üìä *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n" + "\n".join(
        f"- {p['name']} –≤ {p['time']}" for p in participants.values()
    ) if participants else "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–¥—ë—Ç üèãÔ∏è‚Äç‚ôÇÔ∏è"
    
    try:
        await bot.edit_message_text(
            chat_id=GROUP_ID,
            message_id=summary_msg_id,
            text=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

from datetime import datetime, timedelta, timezone, time as dt_time

def main():
    app = Application.builder().token(TOKEN).build()
    job_queue = app.job_queue

    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 12:40 –ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫—É
    tz = pytz.timezone("Asia/Novosibirsk")
    run_time = dt_time(hour=13, minute=30, tzinfo=tz)

    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ 13:00 –ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫—É")

    job_queue.run_daily(
        send_poll,
        time=run_time,
        days=tuple(range(7))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    )

    app.add_handler(CallbackQueryHandler(handle_response))
    app.add_handler(CommandHandler("test", test_command))

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –≤ 13:00 –∏–ª–∏ –ø–æ /test")
    app.run_polling()

if __name__ == '__main__':
    main()